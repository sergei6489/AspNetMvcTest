@model Core.Product
@{   
    string imgSrc = "";
    if (Model.Image!=null)
    {
        imgSrc = String.Format( "data:image/gif;base64,{0}", Convert.ToBase64String( Model.Image ) );
    }

   bool isNew =(bool) ViewBag.IsNew;
}
<script>
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#image').attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }

    $(document).ready(function () {
        $("#uploadimage").change(function () {
            readURL(this);
        });
    });
</script>

<div class="container">
    @using( Html.BeginForm( "Create", "Product", FormMethod.Post, new { enctype = "multipart/form-data" } ) )
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(n=>n.Id)
        @Html.Hidden("isNew", isNew)
        <div class="form-horizontal">
            <h4>@(ViewBag.IsNew ? "Добавить новый " : "Редактировать ") продукт</h4>
            <hr />
            <div class="col-sm-offset-2">
                @Html.ValidationSummary( true )

                <div class="form-group">
                    <img id="image" class="col-md-offset-2" src="@imgSrc" alt="" style="max-height:150px;max-width:300px;" />
                </div>

                <div class="form-group">
                    @Html.LabelFor( model => model.Image, new { @class = "control-label col-md-2" } )
                    <div class="col-md-10">
                        <input type="file" id="uploadimage" name="uploadimage" />
                        @Html.ValidationMessageFor( model => model.Image )
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor( model => model.Name, new { @class = "control-label col-md-2" } )
                    <div class="col-md-10">
                        @Html.EditorFor( model => model.Name )
                        @Html.ValidationMessageFor( model => model.Name )
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor( model => model.Category, new { @class = "control-label col-md-2" } )
                    <div class="col-md-10">
                        @Html.EditorFor( model => model.Category )
                        @Html.ValidationMessageFor( model => model.Category )
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor( model => model.Price, new { @class = "control-label col-md-2" } )
                    <div class="col-md-10">
                        @Html.EditorFor( model => model.Price )
                        @Html.ValidationMessageFor( model => model.Price )
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor( model => model.Description, new { @class = "control-label col-md-2" } )
                    <div class="col-md-10">
                        @Html.TextAreaFor( model => model.Description )
                        @Html.ValidationMessageFor( model => model.Description )
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="@(isNew ? "Добавить" : "Редактировать")" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>
